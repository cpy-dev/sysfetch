#!/usr/bin/python3

import sys
try:
    sys.path.append('/usr/share/sysfetch')
except:
    try:
        import distros
    except:
        print('Using sysfetch out of its git directory is possible only if you executed install.sh script')
else:
    import distros
import psutil
from subprocess import getoutput as terminal
import os

HOME = terminal('echo $HOME')

unicodes = {
    'alpine': '\uF300',
    'macos': '\uF302',
    'arch': '\uF303',
    'debian': '\uF306',
    'kali': '\uF327',
    'parrot': '\uF329',
    'endeavour': '\uF322',
    'raspbian': '\uF315',
    'manjaro': '\uF312',
    'centos': '\uF304',
    'opensuse': '\uF314',
    'redhat': '\uF316',
    'sabayon': '\uF317',
    'slackware': '\uF318',
    'mandriva': '\uF311',
    'mageia': '\uF310',
    'devuan': '\uF307',
}

colors = {
    'grey': '90m',
    'red': '31m',
    'yellow': '93m',
    'purple': '95m',
    'green': '32m',
    'lightblue': '94m',
    'blue': '34m',
    'orange': '33m',
    'aquagreen': '96m'
}

def makeNew(cached=False):
    output = []
    cache = []

    if 'Android' in terminal('uname -a'):
        possible = 'Android'

    else:
        osname = terminal('cat /etc/os-release | grep -w ID | awk -F \'=\' \'{ print $2 }\'').strip()
        possible = []

        for logo in distros.distro:
            if logo.lower() in osname.lower():
                possible.append(logo)

        if not isinstance(possible, str):
            if len(possible) == 1:
                possible = possible[0]

    asciiArt = distros.distro[possible][0]
    width = distros.distro[possible][1]
    height = distros.distro[possible][2]

    unicodeLogo = '\uF31A'
    if osname in unicodes.keys():
        for key in unicodes:
            if key.lower() in osname.lower():
                unicodeLogo = unicodes[key]
    else:
        try:
            osLike = terminal('cat /etc/os-release | grep -w ID_LIKE | awk -F \'=\' \'{ print $2 }\'')
        except:
            pass
        else:
            for key in unicodes:
                if key.lower() in osLike.lower():
                    unicodeLogo = unicodes[key]

    colorUnicode = f'\x1b[1;{color}'
    colorUnicodeBold = f'\x1b[7;{color}'
    white = '\x1b[00m'
    indent = f'\x1b[{width}C'
    down = '\x1b[1B\x1b[9999D'

    output.append('{up}' + indent + '\x1b[1D' + colorUnicode + '' + white + f'{colorUnicodeBold} ' + terminal(
        'whoami') + f' {unicodeLogo} ' + terminal('uname -n') + ' ' + white + colorUnicode + '' + white + down)
    cache.append(
        '{up}' + indent + '\x1b[1D' + '{color_unicode}' + '' + white + '{color_unicode_bold} ' + '{username} ' +
        unicodeLogo + ' {hostname} ' + white + '{color_unicode}' + '' + white + down)

    distro = terminal('cat /etc/os-release | grep PRETTY | awk -F \'"\' \'{print $2 }\'').strip()
    output.append(indent + colorUnicode + 'os: ' + white + distro + down)
    cache.append(indent + '{color_unicode}' + 'os: ' + white + distro + down)

    kernel = terminal('uname -r')
    output.append(indent + colorUnicode + 'kernel: ' + white + kernel + down)
    cache.append(indent + '{color_unicode}' + 'kernel: ' + white + '{kernel}' + down)

    shell = terminal('$SHELL --version').split('\n')[0]
    output.append(indent + colorUnicode + 'shell: ' + white + shell + down)
    cache.append(indent + '{color_unicode}' + 'shell: ' + white + '{shell}' + down)

    cpu = terminal('lscpu | grep "Model name" | awk -F \':\' \'{ print $2 }\'').strip()
    output.append(indent + colorUnicode + 'cpu: ' + white + cpu + down)
    cache.append(indent + '{color_unicode}' + 'cpu: ' + white + cpu + down)

    cpuarch = terminal('lscpu | grep Arch | awk -F \':\' \'{ print $2 }\'').strip()
    output.append(indent + colorUnicode + '    architecture: ' + white + cpuarch + down)
    cache.append(indent + '{color_unicode}' + '    architecture: ' + white + cpuarch + down)

    cpuCores = terminal('lscpu | grep "CPU(s)" -m 1 | awk -F \':\' \'{ print $2 }\'').strip()
    output.append(indent + colorUnicode + '    cores: ' + white + cpuCores + down)
    cache.append(indent + '{color_unicode}' + '    cores: ' + white + cpuCores + down)

    try:
        cpuUsage = str(psutil.cpu_percent()) + '%'
        output.append(indent + colorUnicode + '    usage: ' + white + cpuUsage + down)
        cache.append(indent + '{color_unicode}' + '    usage: ' + white + '{cpu_usage}' + down)
    except:
        pass

    try:
        cpuTemp = str(psutil.sensors_temperatures()['coretemp'][0].current) + ' C'
        output.append(indent + colorUnicode + '    temperature: ' + white + cpuTemp + down)
        cache.append(indent + '{color_unicode}' + '    temperature: ' + white + '{cpu_temperature}' + down)
    except:
        pass

    ram = str(round(
        float(terminal('cat /proc/meminfo | grep MemTotal | awk \'{ print $2 / 1024 / 1024 }\'').replace(',', '.')),
        2)) + ' GB'
    output.append(indent + colorUnicode + 'ram: ' + white + ram + down)
    cache.append(indent + '{color_unicode}' + 'ram: ' + white + ram + down)

    ramUsage = str(round(float(terminal(
        "echo $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }' && cat /proc/meminfo | grep MemAvailable | awk '{ print $2 }') | awk '{ print ($1 - $2) * 100 / $1 }'").replace(
        ',', '.')))) + '% (' + str(round(float(terminal(
        "echo $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }' && cat /proc/meminfo | grep MemAvailable | awk '{ print $2 }') | awk '{ print ($1 - $2) / 1024 / 1024 }'").replace(
        ',', '.')), 2)) + ' GB)'
    output.append(indent + colorUnicode + '    usage: ' + white + ramUsage + down)
    cache.append(indent + '{color_unicode}' + '    usage: ' + white + '{ram_usage}' + down)

    ramCached = terminal('cat /proc/meminfo | grep -m 1 "Cached" | awk  \'{ print $2 / 1024 " MB"}\'').strip()
    output.append(indent + colorUnicode + '    cached: ' + white + ramCached + down)
    cache.append(indent + '{color_unicode}' + '    cached: ' + white + '{ram_cached}' + down)

    swap = str(round(
        float(terminal('cat /proc/meminfo | grep "SwapTotal" | awk \'{ print $2 / 1024 / 1024 }\'').replace(',', '.')),
        2)) + ' GB'
    output.append(indent + colorUnicode + 'swap: ' + white + swap + down)
    cache.append(indent + '{color_unicode}' + 'swap: ' + white + swap + down)

    swapUsage = str(round(float(terminal(
        "echo $(cat /proc/meminfo | grep SwapTotal | awk '{ print $2 }' && cat /proc/meminfo | grep SwapFree | awk '{ print $2 }') | awk '{ print $1 ? ($1 - $2) * 100 / $1 : 0}'").replace(
        ',', '.')))) + '% (' + str(round(float(terminal(
        "echo $(cat /proc/meminfo | grep SwapTotal | awk '{ print $2 }' && cat /proc/meminfo | grep SwapFree | awk '{ print $2 }') | awk '{ print ($1 - $2) / 1024 / 1024 }'").replace(
        ',', '.')), 2)) + ' GB)'
    output.append(indent + colorUnicode + '    usage: ' + white + swapUsage + down)
    cache.append(indent + '{color_unicode}' + '    usage: ' + white + '{swap_usage}' + down)

    swapCached = terminal('cat /proc/meminfo | grep SwapCached | awk \'{ print $2 / 1024 }\'').strip() + ' MB'
    output.append(indent + colorUnicode + '    cached: ' + white + swapCached + down)
    cache.append(indent + '{color_unicode}' + '    cached: ' + white + '{swap_cached}' + down)

    gpu = terminal("lspci | grep VGA | awk -F 'controller:' '{ print $2 }'").strip()
    output.append(indent + colorUnicode + 'gpu: ' + white + gpu + down)
    cache.append(indent + '{color_unicode}' + 'gpu: ' + white + gpu + down)

    processes = str(len(terminal('ps axu').split('\n')) - 1)
    output.append(indent + colorUnicode + 'processes: ' + white + processes + down)
    cache.append(indent + '{color_unicode}' + 'processes: ' + white + '{processes}' + down)

    ipv4 = terminal('hostname -I')
    output.append(indent + colorUnicode + 'ipv4: ' + white + ipv4 + down)
    cache.append(indent + '{color_unicode}' + 'ipv4: ' + white + '{ipv4}' + down)

    output.append('{end}' + '\n')
    cache.append('{end}' + '\n')

    lines = len(output)

    up = f'\x1b[{height - (height - lines) // 2}A\x1b[999D'
    end = f'\x1b[9999D\x1b[{(height - lines) // 2}B'

    output[0] = output[0].replace('{up}', up)
    cache[0] = cache[0].replace('{up}', up)

    for i in range(0, len(output) - height):
        output.insert(0, '\n')
        cache.insert(0, '\n')

    output.insert(0, colorUnicode + asciiArt + white)
    cache.insert(0, colorUnicode + asciiArt + white)

    output[-1] = output[-1].replace('{end}', end)
    cache[-1] = cache[-1].replace('{end}', end)

    sys.stdout.write(''.join(output))

    if cached:
        with open(HOME + '/.sysfetch/sysfetch.cache', 'w') as file:
            file.write(''.join(cache))


def printCached():
    with open(HOME + '/.sysfetch/sysfetch.cache', 'r') as cache:
        content = cache.read()
        colorUnicode = f'\x1b[1;{color}'
        colorUnicodeBold = f'\x1b[7;{color}'

        content = content.replace('{username}', terminal('whoami'))
        content = content.replace('{hostname}', terminal('uname -n'))
        content = content.replace('{color_unicode}', colorUnicode)
        content = content.replace('{color_unicode_bold}', colorUnicodeBold)
        content = content.replace('{kernel}', terminal('uname -r'))
        content = content.replace('{shell}', terminal('$SHELL --version').split('\n')[0])
        content = content.replace('{cpu_usage}', str(psutil.cpu_percent()) + '%')
        content = content.replace('{cpu_temperature}', str(psutil.sensors_temperatures()['coretemp'][0].current) + ' C')
        content = content.replace('{ram_usage}', str(round(float(terminal(
            "echo $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }' && cat /proc/meminfo | grep MemAvailable | awk '{ print $2 }') | awk '{ print ($1 - $2) * 100 / $1 }'").replace(
            ',', '.')))) + '% (' + str(round(float(terminal(
            "echo $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }' && cat /proc/meminfo | grep MemAvailable | awk '{ print $2 }') | awk '{ print ($1 - $2) / 1024 / 1024 }'").replace(
            ',', '.')), 2)) + ' GB)')
        content = content.replace('{ram_cached}', terminal(
            'cat /proc/meminfo | grep -m 1 "Cached" | awk  \'{ print $2 / 1024 " MB"}\'').strip())
        content = content.replace('{swap_usage}', str(round(float(terminal(
            "echo $(cat /proc/meminfo | grep SwapTotal | awk '{ print $2 }' && cat /proc/meminfo | grep SwapFree | awk '{ print $2 }') | awk '{ print $1 ? ($1 - $2) * 100 / $1 : 0}'").replace(
            ',', '.')))) + '% (' + str(round(float(terminal(
            "echo $(cat /proc/meminfo | grep SwapTotal | awk '{ print $2 }' && cat /proc/meminfo | grep SwapFree | awk '{ print $2 }') | awk '{ print ($1 - $2) / 1024 / 1024 }'").replace(
            ',', '.')), 2)) + ' GB)')
        content = content.replace('{swap_cached}', terminal(
            'cat /proc/meminfo | grep SwapCached | awk \'{ print $2 / 1024 }\'').strip() + ' MB')
        content = content.replace('{processes}', str(len(terminal('ps axu').split('\n')) - 1))
        content = content.replace('{ipv4}', terminal('hostname -I'))

        sys.stdout.write(content)


if __name__ == '__main__':
    color = colors['purple']

    if not '.sysfetch' in os.listdir(HOME):
        terminal(f'mkdir  {HOME}/.sysfetch')

    if len(sys.argv) == 1:
        if 'sysfetch.cache' in os.listdir(HOME + '/.sysfetch'):
            printCached()

        else:
            makeNew(True)

    else:
        if 'color' in sys.argv:
            colorIndex = sys.argv.index('color') + 1
            color = colors[sys.argv[colorIndex]]

        if 'recache' in sys.argv:
            makeNew()
        else:
            printCached()


